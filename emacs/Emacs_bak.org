* BOOTSTRAP

** Startup Performance

#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			 (time-subtract after-init-time before-init-time)))
	       gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

** Package Management (straight.el)

#+begin_src emacs-lisp :tangle yes
;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Always use straight to install on systems other than Linux
(setq straight-use-package-by-default (not (eq system-type 'gnu/linux)))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)
(use-package org :straight (:type built-in))

;; Load the helper package for commands like `straight-x-clean-unused-repos'
(require 'straight-x)

#+end_src

** Automatic Package Updates

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

** Keep Folders Clean

#+begin_src emacs-lisp
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)
#+end_src


* KEYBOARD BINDINGS

** ESC Cancels All

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Rebind C-u

#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Let's Be Evil

#+begin_src emacs-lisp
  (defun ahsan/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

  (defun ahsan/dont-arr/thow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (add-hook 'evil-mode-hook 'dw/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
          (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))

#+end_src

** Keybinding Panel (which-key)

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (setq which-key-side-window-location 'bottom
	    which-key-sort-order #'which-key-key-order-alpha
	    which-key-sort-uppercase-first nil
	    which-key-add-column-padding 1
	    which-key-max-display-columns nil
	    which-key-min-display-lines 6
	    which-key-side-window-slot -10
	    which-key-side-window-max-height 0.25
	    which-key-idle-delay 0.1
	    which-key-max-description-length 25
	    which-key-allow-imprecise-window-fit t
	    which-key-separator " → " )
    (which-key-mode))
#+end_src

** Simplify Leader Bindings (general.el)

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t))

  (nvmap :keymaps 'override :prefix "SPC"
    "SPC"   '(counsel-M-x :which-key "M-x")
    "c c"   '(compile :which-key "Compile")
    "c C"   '(recompile :which-key "Recompile"))

#+end_src

** Enable Keychord bind with use-package

#+begin_src emacs-lisp
  (use-package use-package-chords
    :disabled
    :config (key-chord-mode 1))
#+end_src


* GENERAL CONFIGURATION

** User Interface

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)      ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell -1)

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil)

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq large-file-warning-threshold nil)
  (setq vc-follow-symlinks t)
  (setq ad-redefinition-action 'accept)

#+end_src

** Theme

#+begin_src emacs-lisp
(use-package one-themes :defer t)
(load-theme 'one-dark  t)
#+end_src

** Font
*** Set the font

#+begin_src emacs-lisp
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (set-face-attribute 'default nil
                         :font "JetBrains Mono"
                         :weight 'light
                         :height (dw/system-settings-get 'emacs/default-face-size)))
    ('darwin (set-face-attribute 'default nil :font "Fira Mono" :height 170)))

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :weight 'light
                      :height (dw/system-settings-get 'emacs/fixed-face-size))

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
                      ;; :font "Cantarell"
                      :font "Iosevka Aile"
                      :height (dw/system-settings-get 'emacs/variable-face-size)
                      :weight 'light)

#+end_src

*** Enable Proper Unicode glyph support

#+begin_src emacs-lisp
  (defun ahsan/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                           (lambda (i) (string-equal (car i) block-name))
                           unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :disabled
    :if (not dw/is-termux)
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
      (lambda (block-name)
        (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
      '("Dingbats"
        "Emoticons"
        "Miscellaneous Symbols and Pictographs"
        "Transport and Map Symbols"))
    (unicode-fonts-setup))

#+end_src

*** Emojis in buffers

#+begin_src emacs-lisp :tangle yes
(use-package emojify
  :hook (erc-mode . emojify-mode)
  :commands emojify-mode    )
#+end_src

** Mode Line
*** Basic Customization

#+begin_src emacs-lisp :tangle yes
(setq display-time-format "%l:%M %p %b %y"
      display-time-default-load-average nil)
#+end_src

*** Enable Mode Diminishing

#+begin_src emacs-lisp :tangle yes
(use-package diminish)
#+end_src

*** Smart Mode Line

#+begin_src emacs-lisp :tangle yes
(use-package smart-mode-line
  :disabled
  :config
  (setq sml/no-confirm-load-theme t)
  (sml/setup)
  (sml/apply-theme 'respectful)  ; Respect the theme colors
  (setq sml/mode-width 'right
      sml/name-width 60)

  (setq-default mode-line-format
  `("%e"
      ,(when dw/exwm-enabled
          '(:eval (format "[%d] " exwm-workspace-current-index)))
      mode-line-front-space
      evil-mode-line-tag
      mode-line-mule-info
      mode-line-client
      mode-line-modified
      mode-line-remote
      mode-line-frame-identification
      mode-line-buffer-identification
      sml/pos-id-separator
      (vc-mode vc-mode)
      " "
      ;mode-line-position
      sml/pre-modes-separator
      mode-line-modes
      " "
      mode-line-misc-info))

  (setq rm-excluded-modes
    (mapconcat
      'identity
      ; These names must start with a space!
      '(" GitGutter" " MRev" " company"
      " Helm" " Undo-Tree" " Projectile.*" " Z" " Ind"
      " Org-Agenda.*" " ElDoc" " SP/s" " cider.*")
      "\\|")))
#+end_src

*** Doom Modeline

#+begin_src emacs-lisp :tangle yes
(use-package minions
  :hook (doom-modeline-mode . minions-mode))

(use-package doom-modeline
  :after eshell     ;; Make sure it gets hooked after eshell
  :hook (after-init . doom-modeline-init)
  :custom-face
  (mode-line ((t (:height 0.85))))
  (mode-line-inactive ((t (:height 0.85))))
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-mu4e nil)
  (doom-modeline-irc nil)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  (doom-modeline-major-mode-icon nil))
#+end_src

** Workspaces

#+begin_src emacs-lisp :tangle yes
(use-package perspective
  :demand t
  :bind (("C-M-k" . persp-switch)
         ("C-M-n" . persp-next)
         ("C-x k" . persp-kill-buffer*))
  :custom
  (persp-initial-frame-name "Main")
  :config
  ;; Running `persp-mode' multiple times resets the perspective list...
  (unless (equal persp-mode t)
    (persp-mode)))
#+end_src

** Notifications

#+begin_src emacs-lisp :tangle yes
(use-package alert
  :commands alert
  :config
  (setq alert-default-style 'notifications))
#+end_src

** Auto-Saving Changed Files

#+begin_src emacs-lisp :tangle yes
(use-package super-save
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+end_src

** Auto-Reverting Changed Files

#+begin_src emacs-lisp :tangle yes
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)
#+end_src

** UI Toggles

#+begin_src emacs-lisp :tangle yes
(ahsan/leader-key-def
  "t"  '(:ignore t :which-key "toggles")
  "tw" 'whitespace-mode
  "tt" '(counsel-load-theme :which-key "choose theme"))

#+end_src

** Highlight Matching Braces

#+begin_src emacs-lisp :tangle yes
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))
#+end_src

** Displaying World Time

#+begin_src emacs-lisp :tangle yes
(setq display-time-world-list
  '(("Etc/UTC" "UTC")
    ("America/Los_Angeles" "Seattle")
    ("America/New_York" "New York")
    ("Asia/Dhaka" "Dhaka")
    ("Europe/Athens" "Athens")
    ("Pacific/Auckland" "Auckland")
    ("Asia/Shanghai" "Shanghai")))
(setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")
#+end_src

** Pinentry

#+begin_src emacs-lisp :tangle yes
(unless (or dw/is-termux
            (eq system-type 'windows-nt))
  (setq epa-pinentry-mode 'loopback)
  (pinentry-start))
#+end_src

** TRAMP

#+begin_src emacs-lisp :tangle yes
;; Set default connection mode to SSH
(setq tramp-default-method "ssh")
#+end_src

** Emacs as Extenral Editor

#+begin_src emacs-lisp :tangle yes
(defun ahsan/show-server-edit-buffer (buffer)
  ;; TODO: Set a transient keymap to close with 'C-c C-c'
  (split-window-vertically -15)
  (other-window 1)
  (set-buffer buffer))

(setq server-window #'ahsan/show-server-edit-buffer)
#+end_src


* EDITING CONFIGURATION

** Tab Widths

#+begin_src emacs-lisp :tangle yes
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
#+end_src

** Use spaces instead of tabs for indentation

#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
#+end_src

** Commenting Lines (change this later to space)

#+begin_src emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** Automatically clean whitespace

#+begin_src emacs-lisp :tangle yes
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+end_src

** Use Parinfer for Lispy languages
** Origami.el for Folding

* STATEFUL KEYMAPS WITH HYPDRA

* COMPLETION SYSTEM
** Preserve Minibuffer History with savehist-mode

#+begin_src emacs-lisp :tangle yes
(use-package savehist
  :config
  (setq history-length 25)
  (savehist-mode 1))

  ;; Individual history elements can be configured separately
  ;;(put 'minibuffer-history 'history-length 25)
  ;;(put 'evil-ex-history 'history-length 50)
  ;;(put 'kill-ring 'history-length 25))
#+end_src

** Completions with Vertico

#+begin_src emacs-lisp :tangle yes
(defun dw/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
      (backward-kill-word arg)))

(use-package vertico
  :straight '(vertico :host github
                      :repo "minad/vertico"
                      :branch "main")
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . dw/minibuffer-backward-kill))
  :custom
  (vertico-cycle t)
  :custom-face
  (vertico-current ((t (:background "#3a3f5a"))))
  :init
  (vertico-mode))
#+end_src

** Completions in Region with Corfu

#+begin_src emacs-lisp :tangle yes
(use-package corfu
  :straight '(corfu :host github
                    :repo "minad/corfu")
  :bind (:map corfu-map
         ("C-j" . corfu-next)
         ("C-k" . corfu-previous)
         ("C-f" . corfu-insert))
  :custom
  (corfu-cycle t)
  :config
  (corfu-global-mode))
#+end_src

** Improved Candidate Filtering with Orderless

#+begin_src emacs-lisp :tangle yes
(use-package orderless
  :st t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

#+end_src

** Consult Commands

#+begin_src emacs-lisp :tangle yes
(defun dw/get-project-root ()
  (when (fboundp 'projectile-project-root)
    (projectile-project-root)))

(use-package consult
  :straight t
  :demand t
  :bind (("C-s" . consult-line)
         ("C-M-l" . consult-imenu)
         ("C-M-j" . persp-switch-to-buffer*)
         :map minibuffer-local-map
         ("C-r" . consult-history))
  :custom
  (consult-project-root-function #'dw/get-project-root)
  (completion-in-region-function #'consult-completion-in-region)
  :config
  (consult-preview-mode))
#+end_src

** Completion Annotations with Marginalia

#+begin_src emacs-lisp :tangle yes
(use-package marginalia
  :after vertico
  :straight t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

** Completion Actions with Embark

#+begin_src emacs-lisp :tangle yes
(use-package embark
  :straight t
  :bind (("C-S-a" . embark-act)
         :map minibuffer-local-map
         ("C-d" . embark-act))
  :config

  ;; Show Embark actions via which-key
  (setq embark-action-indicator
        (lambda (map)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))

;; (use-package embark-consult
;;   :straight '(embark-consult :host github
;;                              :repo "oantolin/embark"
;;                              :files ("embark-consult.el"))
;;   :after (embark consult)
;;   :demand t
;;   :hook
;;   (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src


* JUMPING WITH AVY

#+begin_src emacs-lisp :tangle yes
(use-package avy
  :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

(dw/leader-key-def
  "j"   '(:ignore t :which-key "jump")
  "jj"  '(avy-goto-char :which-key "jump to char")
  "jw"  '(avy-goto-word-0 :which-key "jump to word")
  "jl"  '(avy-goto-line :which-key "jump to line")  )
#+end_src


* WINDOW MANAGEMENT

** Frame Scaling / Zooming
** Window Selection with ace-window
** Window History with winner-mode
** Set Margins for Modes
** Control Buffer Placement

* EXPAND REGION

#+begin_src emacs-lisp :tangle yes
(use-package expand-region
  :bind (("M-[" . er/expand-region)
         ("C-(" . er/mark-outside-pairs)))
#+end_src


* CREDENTIAL MANAGEMENT

#+begin_src emacs-lisp :tangle yes
(use-package password-store
  :config
  (setq password-store-password-length 12))

(use-package auth-source-pass
  :config
  (auth-source-pass-enable))

(dw/leader-key-def
  "ap" '(:ignore t :which-key "pass")
  "app" 'password-store-copy
  "api" 'password-store-insert
  "apg" 'password-store-generate)

#+end_src


* FILE MANAGEMENT (delete later)

** Useful File Functions

#+begin_src emacs-lisp
  (defun ar/show-and-copy-buffer-path ()
    "Show and copy the full path to the current file in the minibuffer."
    (interactive)
    ;; list-buffers-directory is the variable set in dired buffers
    (let ((file-name (or (buffer-file-name) list-buffers-directory)))
      (if file-name
	   (message (kill-new file-name))
	(error "Buffer not visiting a file"))))

   (defun ar/show-buffer-path-name ()
   "Show the full path to the current file in the minibuffer."
   (interactive)
   (let ((file-name (buffer-file-name)))
     (if file-name
	  (progn
	    (message file-name)
	    (kill-new file-name))
       (error "Buffer not visiting a file"))))
#+end_src

** Some Useful File-related Modules

#+begin_src emacs-lisp
  (use-package recentf
    :config
  (use-package sudo-edit)
    (recentf-mode))
  (save-place-mode 1)
#+end_src

** File-related Keybindings

#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "f f"   '(find-file :which-key "Find file")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(ahsanur041/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Dired

#+begin_src emacs-lisp
  (use-package all-the-icons-dired)
  (use-package dired-open)
  (use-package peep-dired)

  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
		 "d d" '(dired :which-key "Open dired")
		 "d j" '(dired-jump :which-key "Dired jump to current")
		 "d p" '(peep-dired :which-key "Peep-dired"))

  (with-eval-after-load 'dired
    ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  ;; Get file icons in dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  ;; With dired-open plugin, you can launch external programs for certain extensions
  ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
  (setq dired-open-extensions '(("gif" . "sxiv")
				("jpg" . "sxiv")
				("png" . "sxiv")
				("mkv" . "mpv")
				("mp4" . "mpv")))


#+end_src

** Neotree

#+begin_src emacs-lisp
  (defcustom neo-window-width 25
    "*Specifies the width of the NeoTree window."
    :type 'integer
    :group 'neotree)

  (use-package neotree
    :config
    (setq neo-smart-open t
	    neo-window-width 30
	    neo-theme (if (display-graphic-p) 'icons 'arrow)
	    ;;neo-window-fixed-size nil
	    inhibit-compacting-font-caches t
	    projectile-switch-project-action 'neotree-projectile-action)
	    ;; truncate long file names in neotree
	    (add-hook 'neo-after-create-hook
	       #'(lambda (_)
		   (with-current-buffer (get-buffer neo-buffer-name)
		     (setq truncate-lines t)
		     (setq word-wrap nil)
		     (make-local-variable 'auto-hscroll-mode)
		     (setq auto-hscroll-mode nil)))))

  ;; show hidden files
  (setq-default neo-show-hidden-files t)

  (nvmap :prefix "SPC"
	   "e"   '(neotree-toggle :which-key "Toggle neotree file viewer")
	   "d n"   '(neotree-dir :which-key "Open directory in neotree"))
#+end_src


* ORG MODE
** Org Configuration

#+begin_src emacs-lisp :tangle yes
;; TODO: Mode this to another section
(setq-default fill-column 80)

;; Turn on indentation and auto-fill mode for Org files
(defun dw/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil)
  (diminish org-indent-mode))

(use-package org
  :defer t
  :hook (org-mode . dw/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-startup-folded 'content
        org-cycle-separator-lines 2)

  (setq org-modules
    '(org-crypt
        org-habit
        org-bookmark
        org-eshell
        org-irc))

  (setq org-refile-targets '((nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)))

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (ledger . t)))

#+end_src

** Workflow Configuration

#+begin_src emacs-lisp :tangle yes
(require 'dw-org)
(require 'dw-workflow)
#+end_src

** Pomodoro

#+begin_src emacs-lisp :tangle yes
(use-package org-pomodoro
  :after org
  :config
  (setq org-pomodoro-start-sound "~/.dotfiles/.emacs.d/sounds/focus_bell.wav")
  (setq org-pomodoro-short-break-sound "~/.dotfiles/.emacs.d/sounds/three_beeps.wav")
  (setq org-pomodoro-long-break-sound "~/.dotfiles/.emacs.d/sounds/three_beeps.wav")
  (setq org-pomodoro-finished-sound "~/.dotfiles/.emacs.d/sounds/meditation_bell.wav")

  (dw/leader-key-def
    "op"  '(org-pomodoro :which-key "pomodoro")))

#+end_src

** Protocol

#+begin_src emacs-lisp :tangle yes
(require 'org-protocol)

#+end_src

** Searching

#+begin_src emacs-lisp :tangle yes
(defun dw/search-org-files ()
  (interactive)
  (counsel-rg "" "~/Notes" nil "Search Notes: "))
#+end_src

** Bindings

#+begin_src emacs-lisp :tangle yes
(use-package evil-org
  :after org
  :hook ((org-mode . evil-org-mode)
         (org-agenda-mode . evil-org-mode)
         (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(dw/leader-key-def
  "o"   '(:ignore t :which-key "org mode")

  "oi"  '(:ignore t :which-key "insert")
  "oil" '(org-insert-link :which-key "insert link")

  "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

  "os"  '(dw/counsel-rg-org-files :which-key "search notes")

  "oa"  '(org-agenda :which-key "status")
  "ot"  '(org-todo-list :which-key "todos")
  "oc"  '(org-capture t :which-key "capture")
  "ox"  '(org-export-dispatch t :which-key "export"))

#+end_src

** Update TOC on Save

#+begin_src emacs-lisp :tangle yes
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))

#+end_src

** Calendar Sync

#+begin_src emacs-lisp :tangle yes
;; (use-package org-gcal
;;   :after org
;;   :config

;;   (setq org-gcal-client-id (password-store-get "API/Google/daviwil-emacs-id")
;;         org-gcal-client-secret (password-store-get "API/Google/daviwil-emacs-secret")
;;         org-gcal-file-alist `(("daviwil@github.com" . ,(dw/org-path "Calendar.org"))
;;                               (,(password-store-get "Misc/Calendars/GitHub/AtomTeam") . ,(dw/org-path "Calendar.org"))
;;                              )))

;; (dw/leader-key-def
;;   "ac"  '(:ignore t :which-key "calendar")
;;   "acs" '(org-gcal-fetch :which-key "sync"))

(use-package org-caldav
  :disabled
  :defer t
  :init
  (setq org-caldav-url "https://caldav.fastmail.com/dav/calendars/user/daviwil@fastmail.fm/"
        org-caldav-inbox nil
        org-caldav-calendar-id nil
        org-caldav-calendars
         '((:calendar-id "fe098bfb-0726-4e10-bff2-55f8278c8a56"
            :inbox "~/Notes/Calendar/Personal.org")
           (:calendar-id "8f150437-cc57-4ba0-9200-d1d98389e2e4"
            :inbox "~/Notes/Calendar/Work.org"))
        org-caldav-delete-org-entries 'always
        org-caldav-delete-calendar-entries 'never))


#+end_src

** Reminders

#+begin_src emacs-lisp :tangle yes

;; (use-package org-wild-notifier
;;   :after org
;;   :config
;;   ; Make sure we receive notifications for non-TODO events
;;   ; like those synced from Google Calendar
;;   (setq org-wild-notifier-keyword-whitelist nil)
;;   (setq org-wild-notifier-notification-title "Agenda Reminder")
;;   (setq org-wild-notifier-alert-time 15)
;;   (org-wild-notifier-mode))

#+end_src

** Org Roam

#+begin_src emacs-lisp :tangle yes
(use-package org-roam
  :straight t
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/Notes/Roam/")
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'default)
  (org-roam-capture-templates
    '(("d" "default" plain
       #'org-roam-capture--get-point
       "%?"
       :file-name "%<%Y%m%d%H%M%S>-${slug}"
       :head "#+title: ${title}\n"
       :unnarrowed t)
      ("ll" "link note" plain
       #'org-roam-capture--get-point
       "* %^{Link}"
       :file-name "Inbox"
       :olp ("Links")
       :unnarrowed t
       :immediate-finish)
      ("lt" "link task" entry
       #'org-roam-capture--get-point
       "* TODO %^{Link}"
       :file-name "Inbox"
       :olp ("Tasks")
       :unnarrowed t
       :immediate-finish)))
  (org-roam-dailies-directory "Journal/")
  (org-roam-dailies-capture-templates
    '(("d" "default" entry
       #'org-roam-capture--get-point
       "* %?"
       :file-name "Journal/%<%Y-%m-%d>"
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("t" "Task" entry
       #'org-roam-capture--get-point
       "* TODO %?\n  %U\n  %a\n  %i"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Tasks")
       :empty-lines 1
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("j" "journal" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("l" "log entry" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - %?"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("m" "meeting" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")))
  :bind (:map org-roam-mode-map
          (("C-c n l"   . org-roam)
           ("C-c n f"   . org-roam-find-file)
           ("C-c n d"   . org-roam-dailies-find-date)
           ("C-c n c"   . org-roam-dailies-capture-today)
           ("C-c n C r" . org-roam-dailies-capture-tomorrow)
           ("C-c n t"   . org-roam-dailies-find-today)
           ("C-c n y"   . org-roam-dailies-find-yesterday)
           ("C-c n r"   . org-roam-dailies-find-tomorrow)
           ("C-c n g"   . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-insert))
         (("C-c n I" . org-roam-insert-immediate))))
#+end_src

** Deft

#+begin_src emacs-lisp :tangle yes
(use-package deft
  :commands (deft)
  :config (setq deft-directory "~/Notes/Roam"
                deft-recursive t
                deft-extensions '("md" "org")))

#+end_src

** Auto-show Markup Symbols

#+begin_src emacs-lisp :tangle yes
(use-package org-appear
  :hook (org-mode . org-appear-mode))

#+end_src

* ORG MODE (delete later)

** Bullets

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Fonts

#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "FiraCode Nerd Font" :weight 'medium :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil))
#+end_src

** Org Configuration

#+begin_src emacs-lisp
  ;; TODO: Mode this to another section
  (setq-default fill-column 80)

  ;; Turn on indentation and auto-fill mode for Org files
  (defun ar/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (diminish org-indent-mode))

  (use-package org
    :defer t
    :hook (org-mode . ar/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
	    org-hide-emphasis-markers t
	    org-src-fontify-natively t
	    org-fontify-quote-and-verse-blocks t
	    org-src-tab-acts-natively t
	    org-edit-src-content-indentation 2
	    org-hide-block-startup nil
	    org-src-preserve-indentation nil
	    org-startup-folded 'content
	    org-cycle-separator-lines 2)

    (setq org-modules
      '(org-crypt
	    org-habit
	    org-bookmark
	    org-eshell
	    org-irc))

    (setq org-refile-targets '((nil :maxlevel . 1)
				 (org-agenda-files :maxlevel . 1)))

    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path t)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup))
#+end_src

** Block Templates

#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("lua" . "src lua"))
  (add-to-list 'org-structure-template-alist '("cf" . "src conf"))

#+end_src

** Evil-org

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode)
           (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Bindings

#+begin_src emacs-lisp
(nvmap :keymaps 'override :prefix "SPC"
"i" '(:ignore t :which-key "insert")
"il" '(org-insert-link :which-key "insert link")
"ot"  '(org-todo-list :which-key "todos")
"oa"  '(org-agenda :which-key "status")
"ot"  '(org-todo-list :which-key "todos")
"oc"  '(org-capture t :which-key "capture")
"ox"  '(org-export-dispatch t :which-key "export"))

#+end_src>

** Table of Contents

#+begin_src emacs-lisp
  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))
#+end_src


* ORG RESEARCH MODE

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Notes/Roam/")
    (org-roam-completion-everywhere t)
    (org-roam-completion-system 'default)
    (org-roam-capture-templates
     '(("d" "default" plain
        #'org-roam-capture--get-point
        "%?"
        :file-name "%<%Y%m%d%H%M%S>-${slug}"
        :head "#+title: ${title}\n"
        :unnarrowed t)
       ("ll" "link note" plain
        #'org-roam-capture--get-point
        "* %^{Link}"
        :file-name "Inbox"
        :olp ("Links")
        :unnarrowed t
        :immediate-finish)
       ("lt" "link task" entry
        #'org-roam-capture--get-point
        "* TODO %^{Link}"
        :file-name "Inbox"
        :olp ("Tasks")
        :unnarrowed t
        :immediate-finish)))
    (org-roam-dailies-directory "Journal/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        #'org-roam-capture--get-point
        "* %?"
        :file-name "Journal/%<%Y-%m-%d>"
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
       ("t" "Task" entry
        #'org-roam-capture--get-point
        "* TODO %?\n  %U\n  %a\n  %i"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Tasks")
        :empty-lines 1
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
       ("j" "journal" entry
        #'org-roam-capture--get-point
        "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Log")
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
       ("l" "log entry" entry
        #'org-roam-capture--get-point
        "* %<%I:%M %p> - %?"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Log")
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
       ("m" "meeting" entry
        #'org-roam-capture--get-point
        "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Log")
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")))

    (nvmap :map org-roam-mode-mpa :keymaps 'override :prefix "SPC"
      "nl"   '(org-roam
               :which-key "org roam")
      "nf"   '(org-roam-find-file
               :which-key "find file")
      "nd"   '(org-roam-dailies-find-date
               :which-key "find date")
      "nc"   '(org-roam-dailies-capture-today
               :which-key "capture today")
      "nSr"  '(org-roam-dailies-capture-tomorrow
               :which-key "capture tommorrow")
      "nt"   '(org-roam-dailies-find-today
               :which-key "find today")
      "ny"   '(org-roam-dailies-find-yesterday
               :which-key "find yesterday")
      "nr"   '(org-roam-dailies-find-tomorrow
               :which-key "find tomorrow")
      "ng"   '(org-roam-graph
               :which-key "find graph"))

    (nvmap :map org-mode-map :keywords 'override :prefix "SPC"
      "ni"  '(org-roam-insert
              :whic-key "insert")
      "nSi" '(org-roam-insert-immediate
              :which-key "insert immediately")))
#+end_src

** Org Roam Bibtex

#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after org-roam
    :hook (org-roam-mode . org-roam-bibtex-mode))
#+end_src

** Org Roam UI

#+begin_src emacs-lisp
  (use-package websocket
    :after org-roam)

  (use-package org-roam-ui
    :after (org-roam websocket)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src


* GENERAL PROGRAMMING PACKAGES

** magit

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :after magit)

  (nvmap :keymaps 'override :prefix "SPC"
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)

  (use-package magit-todos
     :after magit)

#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :config (setq-default flycheck-emacs-lisp-load-path 'inherit)
    :init (global-flycheck-mode))
#+end_src

** highlight-indent-guides

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-responsive 'top)
    :hook (prog-mode . highlight-indent-guides-mode))
#+end_src

** company

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook ((prog-mode . company-mode)
           (latex-mode . company-mode))
    :init
    (setq company-show-numbers t
          company-minimum-prefix-length 1
          company-idle-delay 0.0
          company-dabbrev-downcase nil))
#+end_src

** lsp

#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook ((python-mode . lsp-deferred)
           (go-mode . lsp-deferred)
           (php-mode . lsp-deferred)
           (vue-mode . lsp-deferred)
           (web-mode . lsp-deferred)
           (typescript-mode . lsp-deferred)
           (js-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-c C-l")
    :config (setq lsp-prefer-capf t))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-show-hover t))

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list)
#+end_src

** editorconfig

#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src


* LATEX
** auctex

#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-engine 'luatex)C
    (setq-default TeX-master nil)
    (setq org-latex-listings 't))
#+end_src

** company-auctex

#+begin_src emacs-lisp
  (use-package company-auctex
    :after auctex
    :config
    (company-auctex-init))
#+end_src

** cdlatex

#+begin_src emacs-lisp
  (use-package cdlatex
    :hook ((LaTeX-mode . turn-on-cdlatex)
           (org-mode . turn-on-org-cdlatex)))
#+end_src

** custom config

#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src


* PYTHON
** ein

#+begin_src emacs-lisp
  (use-package ein
    :ensure t)
#+end_src

** pyright

#+begin_src emacs-lisp
  (setq my/pipenv-python-alist '())

  (defun my/get-pipenv-python ()
    (let ((default-directory (projectile-project-root)))
      (if (file-exists-p "Pipfile")
          (let ((asc (assoc default-directory my/pipenv-python-alist)))
            (if asc
                (cdr asc)
              (let ((python-executable
                     (string-trim (shell-command-to-string "PIPENV_IGNORE_VIRTUALENVS=1 pipenv run which python 2>/dev/null"))))
                (if (string-match-p ".*not found.*" python-executable)
                    (message "Pipfile found, but not pipenv executable!")
                  (message (format "Found pipenv python: %s" python-executable))
                  (add-to-list 'my/pipenv-python-alist (cons default-directory python-executable))
                  python-executable))))
        "python")))

    (use-package lsp-pyright
      :ensure t
      :defer t
      :hook (python-mode . (lambda ()
                             (require 'lsp-pyright)
                             (setq-local lsp-pyright-python-executable-cmd (my/get-pipenv-python))
                             (lsp))))

  (add-hook 'python-mode-hook #'smartparens-mode)
  (add-hook 'python-mode-hook #'hs-minor-mode)
#+end_src

** pipenv

#+begin_src emacs-lisp
  (use-package pipenv
    :ensure t
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))
#+end_src

** formatters
*** yapfify

#+begin_src emacs-lisp
  (use-package yapfify
    :disabled
    :commands (yapfify-region
               yapfify-buffer
               yapfify-region-or-buffer
               yapf-mode))
#+end_src

*** black

#+begin_src emacs-lisp
  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim)
    :commands (python-black-buffer)
    :config
    (setq python-black-command "black"))
#+end_src

*** isort

#+begin_src emacs-lisp
  (use-package py-isort
    :ensure t
    :commands (py-isort-buffer py-isort-region))

#+end_src
