::#+TITLE: Personal Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes

* BOOTSTRAP

** Startup Performance

#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			 (time-subtract after-init-time before-init-time)))
	       gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

** Package System

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq package-enable-at-startup nil)

#+end_src

* BASIC UI

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)       
  (tool-bar-mode -1)         
  (tooltip-mode -1)           
  (set-fringe-mode 10)        

  (menu-bar-mode -1)         
  (use-package all-the-icons
    :ensure t)
  (setq use-dialog-box nil)
#+end_src

** Electric Pair Mode

#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (add-hook
   'org-mode-hook (lambda ()
		      (setq-local electric-pair-inhibit-predicate
				  `(lambda (c)
				     (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

** Line Numbers

#+begin_src emacs-lisp
  ;; Disable line numbers for some modes
  (dolist (mode '(dired-mode-hook
		  org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  neotree-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))


#+end_src

** Fonts

#+begin_src emacs-lisp
  (defun ahsanur041/set-font-faces()
      (set-face-attribute 'default nil
                          :font "FiraCode Nerd Font"
                          :height 120
                          :weight 'medium)

      (set-face-attribute 'fixed-pitch nil
                          :font "FiraCode Nerd Font"
                          :height 120
                          :weight 'medium)

      (set-face-attribute 'variable-pitch nil
                          :font "FiraCode Nerd Font"
                          :height 130
                          :weight 'regular))

  (if (daemonp)
    (add-hook 'after-make-frame-functions
                (lambda (frame)
                  ;; (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (ahsanur041/set-font-faces))))
    (ahsanur041/set-font-faces))
#+end_src

** Ligatures

#+begin_src emacs-lisp
  (use-package ligature
    :ensure t
    :if (display-graphic-p)
    :config
    (ligature-set-ligatures
    '(scss-mode
      python-mode
      org-mode
      markdown-mode
      web-mode)
    '("--" "---" "==" "===" "!=" "!==" "=!=" "=:=" "=/=" "<="
     ">=" "&&" "&&&" "&=" "++" "+++" "***" ";;" "!!" "??"
     "?:" "?." "?=" "<:" ":<" ":>" ">:" "<>" "<<<" ">>>"
     "<<" ">>" "||" "-|" "_|_" "|-" "||-" "|=" "||=" "##"
     "###" "####" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:"
     "#!" "#=" "^=" "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>"
     "<*" "*>" "</" "</>" "/>" "<!--" "<#--" "-->" "->" "->>"
     "<<-" "<-" "<=<" "=<<" "<<=" "<==" "<=>" "<==>" "==>" "=>"
     "=>>" ">=>" ">>=" ">>-" ">-" ">--" "-<" "-<<" ">->" "<-<"
     "<-|" "<=|" "|=>" "|->" "<->" "<~~" "<~" "<~>" "~~" "~~>"
     "~>" "~-" "-~" "~@" "[||]" "|]" "[|" "|}" "{|" "[<"
     ">]" "|>" "<|" "||>" "<||" "|||>" "<|||" "<|>" "..." ".."
     ".=" ".-" "..<" ".?" "::" ":::" ":=" "::=" ":?" ":?>"
     "//" "///" "/*" "*/" "/=" "//=" "/==" "@_" "__"))
    (global-ligature-mode t))
#+end_src

** Zooming In & Out

#+begin_src emacs-lisp
  ;; zoom in/out like we do everywhere else.
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)


#+end_src

** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (setq which-key-side-window-location 'bottom
	    which-key-sort-order #'which-key-key-order-alpha
	    which-key-sort-uppercase-first nil
	    which-key-add-column-padding 1
	    which-key-max-display-columns nil
	    which-key-min-display-lines 6
	    which-key-side-window-slot -10
	    which-key-side-window-max-height 0.25
	    which-key-idle-delay 0.1
	    which-key-max-description-length 25
	    which-key-allow-imprecise-window-fit t
	    which-key-separator " → " )
    (which-key-mode))
#+end_src

** Perspective

#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers) 
    :config
    (persp-mode))
#+end_src

** disable ring-bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src


* EVIL MODE

** General Setup

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-keybinding nil)
    (setq evil-search-module 'evil-search)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

** Evil-surround

#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

** Evil-commentary

#+begin_src emacs-lisp
  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode))
#+end_src

** Evil-lion

#+begin_src emacs-lisp 
  (use-package evil-lion
    :config
    (setq evil-lion-left-align-key (kbd "g a"))
    (setq evil-lion-right-align-key (kbd "g A"))
    (evil-lion-mode))
#+end_src

** Evil Collection

#+begin_src emacs-lisp
  (use-package evil-collection
   :after evil
   :config
   (evil-collection-init
    '(devdocs
      proced
      emms
      pass
      calendar
      dired
      ivy
      debug 
      calc
      docker
      ibuffer
      geiser
      info
      elfeed
      edebug
      bookmark
      company
      vterm
      flycheck
      profiler
      cider
      explain-pause-mode
      notmuch
      custom
      xref
      eshell
      helpful
      compile
      comint
      git-timemachine
      magit
      prodigy
      slime
      forge
      deadgrep
      vc-annonate)))
#+end_src

** General Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :after evil
    :config
    (general-evil-setup t))

  (nvmap :keymaps 'override :prefix "SPC"
    "SPC"   '(counsel-M-x :which-key "M-x")
    "c c"   '(compile :which-key "Compile")
    "c C"   '(recompile :which-key "Recompile")) 
#+end_src


* IVY(COUNSEL/SWIPER)

** Counsel

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))
#+end_src

** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :defer 0.1
    :diminish
    :bind
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode)) 
#+end_src

** Ivy-rich

#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
				 'ivy-rich-switch-buffer-transformer)
  (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.

#+end_src

** Swiper

#+begin_src emacs-lisp
  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+end_src

** Making M-x Great Again

#+begin_src emacs-lisp
  (setq ivy-initial-inputs-alist nil)

  (use-package smex)
  (smex-initialize)
#+end_src

** Ivy-posframe


#+begin_src emacs-lisp
  (use-package ivy-posframe
    :init
    (setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
         (complete-symbol            . ivy-posframe-display-at-point)
         (counsel-M-x                . ivy-display-function-fallback)
         (counsel-esh-history        . ivy-posframe-display-at-window-center)
         (counsel-describe-function  . ivy-display-function-fallback)
         (counsel-describe-variable  . ivy-display-function-fallback)
         (counsel-find-file          . ivy-display-function-fallback)
         (counsel-recentf            . ivy-display-function-fallback)
         (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
         (dmenu                      . ivy-posframe-display-at-frame-top-center)
         (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
         (dmenu . 20)
         (t . 10)))
    :config
    (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
#+end_src

** Prescient.el

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessio
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src


* FILE MANAGEMENT

** Useful File Functions

#+begin_src emacs-lisp
  (defun ar/show-and-copy-buffer-path ()
    "Show and copy the full path to the current file in the minibuffer."
    (interactive)
    ;; list-buffers-directory is the variable set in dired buffers
    (let ((file-name (or (buffer-file-name) list-buffers-directory)))
      (if file-name
	   (message (kill-new file-name))
	(error "Buffer not visiting a file"))))

   (defun ar/show-buffer-path-name ()
   "Show the full path to the current file in the minibuffer."
   (interactive)
   (let ((file-name (buffer-file-name)))
     (if file-name
	  (progn
	    (message file-name)
	    (kill-new file-name))
       (error "Buffer not visiting a file"))))
#+end_src

** Some Useful File-related Modules

#+begin_src emacs-lisp
  (use-package recentf
    :config
  (use-package sudo-edit)
    (recentf-mode))
  (save-place-mode 1)
#+end_src

** File-related Keybindings

#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
    "f f"   '(find-file :which-key "Find file")
    "f r"   '(counsel-recentf :which-key "Recent files")
    "f s"   '(save-buffer :which-key "Save file")
    "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
    "f y"   '(ahsanur041/show-and-copy-buffer-path :which-key "Yank file path")
    "f C"   '(copy-file :which-key "Copy file")
    "f D"   '(delete-file :which-key "Delete file")
    "f R"   '(rename-file :which-key "Rename file")
    "f S"   '(write-file :which-key "Save file as...")
    "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Dired

#+begin_src emacs-lisp
  (use-package all-the-icons-dired)
  (use-package dired-open)
  (use-package peep-dired)

  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
		 "d d" '(dired :which-key "Open dired")
		 "d j" '(dired-jump :which-key "Dired jump to current")
		 "d p" '(peep-dired :which-key "Peep-dired"))

  (with-eval-after-load 'dired
    ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  ;; Get file icons in dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  ;; With dired-open plugin, you can launch external programs for certain extensions
  ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
  (setq dired-open-extensions '(("gif" . "sxiv")
				("jpg" . "sxiv")
				("png" . "sxiv")
				("mkv" . "mpv")
				("mp4" . "mpv")))


#+end_src

** Neotree

#+begin_src emacs-lisp
  (defcustom neo-window-width 25
    "*Specifies the width of the NeoTree window."
    :type 'integer
    :group 'neotree)

  (use-package neotree
    :config
    (setq neo-smart-open t
	    neo-window-width 30
	    neo-theme (if (display-graphic-p) 'icons 'arrow)
	    ;;neo-window-fixed-size nil
	    inhibit-compacting-font-caches t
	    projectile-switch-project-action 'neotree-projectile-action) 
	    ;; truncate long file names in neotree
	    (add-hook 'neo-after-create-hook
	       #'(lambda (_)
		   (with-current-buffer (get-buffer neo-buffer-name)
		     (setq truncate-lines t)
		     (setq word-wrap nil)
		     (make-local-variable 'auto-hscroll-mode)
		     (setq auto-hscroll-mode nil)))))

  ;; show hidden files
  (setq-default neo-show-hidden-files t)

  (nvmap :prefix "SPC"
	   "e"   '(neotree-toggle :which-key "Toggle neotree file viewer")
	   "d n"   '(neotree-dir :which-key "Open directory in neotree"))
#+end_src


* ORG MODE

** Bullets

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Fonts

#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "FiraCode Nerd Font" :weight 'medium :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil))
#+end_src

** Org Configuration

#+begin_src emacs-lisp
  ;; TODO: Mode this to another section
  (setq-default fill-column 80)

  ;; Turn on indentation and auto-fill mode for Org files
  (defun ar/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (diminish org-indent-mode))

  (use-package org
    :defer t
    :hook (org-mode . ar/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
	    org-hide-emphasis-markers t
	    org-src-fontify-natively t
	    org-fontify-quote-and-verse-blocks t
	    org-src-tab-acts-natively t
	    org-edit-src-content-indentation 2
	    org-hide-block-startup nil
	    org-src-preserve-indentation nil
	    org-startup-folded 'content
	    org-cycle-separator-lines 2)

    (setq org-modules
      '(org-crypt
	    org-habit
	    org-bookmark
	    org-eshell
	    org-irc))

    (setq org-refile-targets '((nil :maxlevel . 1)
				 (org-agenda-files :maxlevel . 1)))

    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path t)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup))
#+end_src

** Block Templates

#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("lua" . "src lua"))
  (add-to-list 'org-structure-template-alist '("cf" . "src conf"))

#+end_src

** Evil-org

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode)
           (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Bindings

#+begin_src emacs-lisp
(nvmap :keymaps 'override :prefix "SPC" 
"i" '(:ignore t :which-key "insert")
"il" '(org-insert-link :which-key "insert link")
"ot"  '(org-todo-list :which-key "todos")
"oa"  '(org-agenda :which-key "status")
"ot"  '(org-todo-list :which-key "todos")
"oc"  '(org-capture t :which-key "capture")
"ox"  '(org-export-dispatch t :which-key "export"))

#+end_src>

** Table of Contents

#+begin_src emacs-lisp
  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))
#+end_src


* USER INTERFACE
** Doom Theme

#+begin_src emacs-lisp
  (use-package doom-themes)
  (setq doom-themes-enable-bold t    
         doom-themes-enable-italic t) 
  (load-theme 'doom-tokyo-night t)
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15)
    ;;(doom-modeline-bar-width 5)
    (doom-modeline-icon t) 
    (doom-modeline-persp-name t)
    (doom-modeline-persp-icon t))
#+end_src

** Tree-sitter

#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :hook ((python-mode . tree-sitter-mode)
             (python-mode . tree-sitter-hl-mode)
             (csharp-mode . tree-sitter-mode)))
  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+end_src

** Highlight Matching Parenthesis

#+begin_src emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src


* ORG RESEARCH MODE

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Notes/Roam/")
    (org-roam-completion-everywhere t)
    (org-roam-completion-system 'default)
    (org-roam-capture-templates
     '(("d" "default" plain
        #'org-roam-capture--get-point
        "%?"
        :file-name "%<%Y%m%d%H%M%S>-${slug}"
        :head "#+title: ${title}\n"
        :unnarrowed t)
       ("ll" "link note" plain
        #'org-roam-capture--get-point
        "* %^{Link}"
        :file-name "Inbox"
        :olp ("Links")
        :unnarrowed t
        :immediate-finish)
       ("lt" "link task" entry
        #'org-roam-capture--get-point
        "* TODO %^{Link}"
        :file-name "Inbox"
        :olp ("Tasks")
        :unnarrowed t
        :immediate-finish)))
    (org-roam-dailies-directory "Journal/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        #'org-roam-capture--get-point
        "* %?"
        :file-name "Journal/%<%Y-%m-%d>"
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
       ("t" "Task" entry
        #'org-roam-capture--get-point
        "* TODO %?\n  %U\n  %a\n  %i"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Tasks")
        :empty-lines 1
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
       ("j" "journal" entry
        #'org-roam-capture--get-point
        "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Log")
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
       ("l" "log entry" entry
        #'org-roam-capture--get-point
        "* %<%I:%M %p> - %?"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Log")
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
       ("m" "meeting" entry
        #'org-roam-capture--get-point
        "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
        :file-name "Journal/%<%Y-%m-%d>"
        :olp ("Log")
        :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")))

    (nvmap :map org-roam-mode-mpa :keymaps 'override :prefix "SPC"
      "nl"   '(org-roam
               :which-key "org roam")
      "nf"   '(org-roam-find-file
               :which-key "find file")
      "nd"   '(org-roam-dailies-find-date
               :which-key "find date")
      "nc"   '(org-roam-dailies-capture-today
               :which-key "capture today")
      "nSr"  '(org-roam-dailies-capture-tomorrow
               :which-key "capture tommorrow")
      "nt"   '(org-roam-dailies-find-today
               :which-key "find today")
      "ny"   '(org-roam-dailies-find-yesterday
               :which-key "find yesterday")
      "nr"   '(org-roam-dailies-find-tomorrow
               :which-key "find tomorrow")
      "ng"   '(org-roam-graph
               :which-key "find graph"))

    (nvmap :map org-mode-map :keywords 'override :prefix "SPC"
      "ni"  '(org-roam-insert
              :whic-key "insert")
      "nSi" '(org-roam-insert-immediate
              :which-key "insert immediately")))
#+end_src

** Org Roam Bibtex

#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after org-roam
    :hook (org-roam-mode . org-roam-bibtex-mode))
#+end_src

** Org Roam UI

#+begin_src emacs-lisp
  (use-package websocket
    :after org-roam)

  (use-package org-roam-ui
    :after (org-roam websocket)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src


* GENERAL PROGRAMMING PACKAGES

** magit

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :after magit)

  (nvmap :keymaps 'override :prefix "SPC"
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)

  (use-package magit-todos
     :after magit)

#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :config (setq-default flycheck-emacs-lisp-load-path 'inherit)
    :init (global-flycheck-mode))
#+end_src

** highlight-indent-guides

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-responsive 'top)
    :hook (prog-mode . highlight-indent-guides-mode))
#+end_src

** company

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook ((prog-mode . company-mode)
           (latex-mode . company-mode))
    :init
    (setq company-show-numbers t
          company-minimum-prefix-length 1
          company-idle-delay 0.0
          company-dabbrev-downcase nil))
#+end_src

** lsp

#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook ((python-mode . lsp-deferred)
           (go-mode . lsp-deferred)
           (php-mode . lsp-deferred)
           (vue-mode . lsp-deferred)
           (web-mode . lsp-deferred)
           (typescript-mode . lsp-deferred)
           (js-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-c C-l")
    :config (setq lsp-prefer-capf t))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-show-hover t))

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list)
#+end_src

** editorconfig

#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src


* LATEX
** auctex

#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-engine 'luatex)C
    (setq-default TeX-master nil)
    (setq org-latex-listings 't))
#+end_src

** company-auctex

#+begin_src emacs-lisp
  (use-package company-auctex
    :after auctex
    :config
    (company-auctex-init))
#+end_src

** cdlatex

#+begin_src emacs-lisp
  (use-package cdlatex
    :hook ((LaTeX-mode . turn-on-cdlatex)
           (org-mode . turn-on-org-cdlatex)))
#+end_src

** custom config

#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src


* PYTHON
** ein

#+begin_src emacs-lisp
  (use-package ein
    :ensure t)
#+end_src

** pyright

#+begin_src emacs-lisp
  (setq my/pipenv-python-alist '())

  (defun my/get-pipenv-python ()
    (let ((default-directory (projectile-project-root)))
      (if (file-exists-p "Pipfile")
          (let ((asc (assoc default-directory my/pipenv-python-alist)))
            (if asc
                (cdr asc)
              (let ((python-executable
                     (string-trim (shell-command-to-string "PIPENV_IGNORE_VIRTUALENVS=1 pipenv run which python 2>/dev/null"))))
                (if (string-match-p ".*not found.*" python-executable)
                    (message "Pipfile found, but not pipenv executable!")
                  (message (format "Found pipenv python: %s" python-executable))
                  (add-to-list 'my/pipenv-python-alist (cons default-directory python-executable))
                  python-executable))))
        "python")))

    (use-package lsp-pyright
      :ensure t
      :defer t
      :hook (python-mode . (lambda ()
                             (require 'lsp-pyright)
                             (setq-local lsp-pyright-python-executable-cmd (my/get-pipenv-python))
                             (lsp))))
  
  (add-hook 'python-mode-hook #'smartparens-mode)
  (add-hook 'python-mode-hook #'hs-minor-mode)
#+end_src

** pipenv

#+begin_src emacs-lisp
  (use-package pipenv
    :ensure t
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))
#+end_src

** formatters
*** yapfify

#+begin_src emacs-lisp
  (use-package yapfify
    :disabled
    :commands (yapfify-region
               yapfify-buffer
               yapfify-region-or-buffer
               yapf-mode))
#+end_src

*** black

#+begin_src emacs-lisp
  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim) 
    :commands (python-black-buffer)
    :config
    (setq python-black-command "black"))
#+end_src

*** isort

#+begin_src emacs-lisp
  (use-package py-isort
    :ensure t
    :commands (py-isort-buffer py-isort-region))

#+end_src
